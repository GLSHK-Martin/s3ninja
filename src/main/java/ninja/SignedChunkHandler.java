/*
 * Made with all the love in the world
 * by scireum in Remshalden, Germany
 *
 * Copyright by scireum GmbH
 * http://www.scireum.de - info@scireum.de
 */

package ninja;

import io.netty.buffer.ByteBuf;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

/**
 * Handles chunks of data which contains signatures generated by the AWS SDK.
 * <p>
 * We currently do not check the signature of each token, as we checked the request signature.
 * This seems to do the job for a test / mock sever for now.
 */
class SignedChunkHandler extends sirius.web.http.InputStreamHandler {

    private int remainingData = -1;

    @Override
    public void handle(ByteBuf content, boolean last) throws IOException {
        if (!content.isReadable()) {
            super.handle(content, last);
            return;
        }

        if (remainingData >= content.capacity()) {
            // the whole content buffer contains payload data => process immediately
            handlePartially(content, content.capacity(), last);
            return;
        }

        if (remainingData > 0) {
            // a part of the content buffer contains payload data => process the rest immediately
            handlePartially(content, remainingData, false);
            content.readerIndex(content.readerIndex() + remainingData);
        }

        // remainingData must be <= 0 at this place

        if (content.readableBytes() > 0) {
            // the content buffer contains a new chunk header line

            if (remainingData != -1) {
                // this is not the first content buffer so we need to go to the next line
                gotoNextLine(content);
            }
            remainingData = Integer.parseInt(readChunkLengthHex(content), 16);
            gotoNextLine(content);
        }

        // the content buffer still contains payload data
        handlePartially(content, Math.min(remainingData, content.capacity() - content.readerIndex()), last);
    }

    private void handlePartially(ByteBuf content, int length, boolean last) throws IOException {
        super.handle(content.slice(content.readerIndex(), length), last);
        remainingData -= length;
    }

    private void gotoNextLine(ByteBuf content) {
        while (content.isReadable()) {
            if (content.readByte() == '\r' && content.readByte() == '\n') {
                return;
            }
        }
    }

    @NotNull
    private String readChunkLengthHex(ByteBuf content) {
        StringBuilder lengthString = new StringBuilder();
        while (content.isReadable()) {
            byte data = content.readByte();
            if (data == ';') {
                return lengthString.toString();
            }
            lengthString.append((char) data);
        }
        return lengthString.toString();
    }
}
